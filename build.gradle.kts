
import java.util.Date
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    jacoco
    id("io.freefair.lombok") version "8.6"
    id("com.github.ben-manes.versions") version "0.51.0"
    id("application")
    id("checkstyle")

}

checkstyle {
    toolVersion = "10.16.0" // Укажите нужную версию Checkstyle
}
//Пример 3. Настройка HTML-отчета
tasks.withType<Checkstyle>().configureEach {
    reports {
        xml.required = false
        html.required = true
        html.stylesheet = resources.text.fromFile("config/checkstyle/checkstyle.xml")
    }
}
//Пример 4. Включить отчет SARIF
tasks.withType<Checkstyle>().configureEach {
    reports {
        sarif.required = true
    }
}
//Пример 5. Настройка объема памяти, отдаваемой Checkstyle
tasks.withType<Checkstyle>().configureEach {
    minHeapSize = "200m"
    maxHeapSize = "1g"
}

group = "hexlet.code"
version = "1.0-SNAPSHOT"

//tasks.jar {
    //manifest {
        //attributes["Main-Class"] = "hexlet.code.App"
        //attributes["Implementation-Version"] = version
        //attributes["Built-By"] = System.getProperty("user.name")
        //attributes["Built-Date"] = Date()
    //}
application {
    mainClass.set("hexlet.code.Application")
    mainClass = "hexlet.code.App" //указываем точку входа для приложения
    mainClass = "org.gradle.MyMain"
}


repositories {
    mavenCentral()
}

dependencies {
    testImplementation(platform("org.junit:junit-bom:5.10.0"))
    testImplementation("org.junit.jupiter:junit-jupiter")
    implementation("com.puppycrawl.tools:checkstyle:10.16.0")
}

tasks.test {
    useJUnitPlatform()
}

tasks.getByName("run", JavaExec::class) {
    standardInput = System.`in`
}

// 2. Определение зависимостей между отчетами о покрытии кода и выполнением тестов
tasks.test {
    finalizedBy(tasks.jacocoTestReport) // report is always generated after tests run
}
tasks.jacocoTestReport {
    dependsOn(tasks.test) // tests are required to run before generating the report
}
//3. Настройка параметров плагина JaCoCo
jacoco {
    toolVersion = "0.8.11"
    reportsDirectory = layout.buildDirectory.dir("customJacocoReportDir")
    applyTo(tasks.run.get())
}
//4. Настройка тестового задания
tasks.jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir("jacocoHtml")
    }
}
//5. Настройка правил нарушений
tasks.jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = "0.5".toBigDecimal()
            }
        }

        rule {
            isEnabled = false
            element = "CLASS"
            includes = listOf("org.gradle.*")

            limit {
                counter = "LINE"
                value = "TOTALCOUNT"
                maximum = "0.3".toBigDecimal()
            }
        }
    }
}
//6. Настройка тестового задания
tasks.test {
    extensions.configure(JacocoTaskExtension::class) {
        var destinationFile = layout.buildDirectory.file("jacoco/jacocoTest.exec").get().asFile
        classDumpDir = layout.buildDirectory.dir("jacoco/classpathdumps").get().asFile
    }
}
//7. Значения расширения задачи JaCoCo по умолчанию.
tasks.test {
    configure<JacocoTaskExtension> {
        isEnabled = true
        var destinationFile = layout.buildDirectory.file("jacoco/${name}.exec").get().asFile
        includes = emptyList()
        excludes = emptyList()
        excludeClassLoaders = emptyList()
        isIncludeNoLocationClasses = false
        sessionId = "<auto-generated value>"
        isDumpOnExit = true
        classDumpDir = null
        output = JacocoTaskExtension.Output.FILE
        address = "localhost"
        port = 6300
        isJmx = false
    }
}
//8. Использование плагина приложения для генерации данных о покрытии кода
tasks.register<JacocoReport>("applicationCodeCoverageReport") {
    executionData(tasks.run.get())
    sourceSets(sourceSets.main.get())
}
